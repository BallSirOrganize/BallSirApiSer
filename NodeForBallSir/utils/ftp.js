// Generated by CoffeeScript 1.7.1
(function() {
  var FTPClient, FtpConnection, assert, async, fs, ftpCon, ftpConfig, log, mkdirDirRec, path, poolModule;

  poolModule = require('generic-pool');

  FTPClient = require('ftp');

  async = require('async');

  assert = require('assert');

  path = require('path');

  log = require('../utils/log').getLogger('ftp');

  fs = require('fs');

  mkdirDirRec = function(client, dirs, i, cb) {
    var directory, j, paths, _i, _len;
    directory = "";
    if (!(i < dirs.length)) {
      return cb(null);
    }
    if (dirs[i] === "") {
      return mkdirDirRec(client, dirs, i + 1, cb);
    }
    for (j = _i = 0, _len = dirs.length; _i < _len; j = ++_i) {
      paths = dirs[j];
      if (j <= i) {
        directory += paths + '/';
      }
    }
    return client.mkdir(directory, function(err, string) {
      return mkdirDirRec(client, dirs, i + 1, cb);
    });
  };

  FtpConnection = (function() {
    function FtpConnection(option) {
      var _ref, _ref1, _ref2;
      this.timewarning = (_ref = option.timewarning) != null ? _ref : 2000;
      this.pool = poolModule.Pool({
        name: (_ref1 = option.name) != null ? _ref1 : 'ftp',
        create: function(callback) {
          var client;
          client = new FTPClient();
          client.on('ready', function(err) {
            if (err) {
              console.log(err);
            }
            return callback(null, client);
          });
          client.on('error', callback);
          return client.connect(option);
        },
        destroy: function(conn) {
          if (typeof conn.destroy === 'function') {
            return conn.destroy();
          } else {
            return conn.end();
          }
        },
        max: option.poolSize,
        min: 0,
        refreshIdle: false,
        idleTimeoutMillis: (_ref2 = option.idleTimeoutMillis) != null ? _ref2 : 10000
      });
    }

    FtpConnection.prototype.exec = function(command, callback) {
      assert.ok(typeof command === 'function' && typeof callback === 'function');
      return this.pool.acquire((function(_this) {
        return function(err, client) {
          var startTime;
          if (err) {
            return callback(err, null);
          }
          startTime = new Date;
          return command(client, function(err, result) {
            _this.pool.release(client);
            return callback(err, result);
          });
        };
      })(this));
    };

    FtpConnection.prototype.upload = function(instream, fullpath, callback) {
      var op;
      assert.ok(typeof fullpath === "string");
      if (typeof instream === "string") {
        instream = fs.createReadStream(instream);
      }
      instream.on("error", function(err) {
        instream.destroy();
        return callback(err);
      });
      instream.pause();
      op = function(client, cb) {
        var dirs;
        dirs = path.dirname(fullpath).split('/');
        return mkdirDirRec(client, dirs, 0, function(err) {
          if (err) {
            return cb(err);
          }
          return client.put(instream, fullpath, cb);
        });
      };
      return this.exec(op, callback);
    };

    FtpConnection.prototype.download = function(filename, desc, callback) {
      var op;
      op = function(client, cb) {
        return client.get(filename, function(err, stream) {
          if (err) {
            cb(err);
          }
          stream.on('close', function() {
            return cb(null);
          });
          stream.on('error', function(err) {
            return log.warn("ERROR during get(): " + (typeof err.stack === "function" ? err.stack(err.inspect(err)) : void 0));
          });
          return stream.pipe(fs.createWriteStream(desc));
        });
      };
      return this.exec(op, callback);
    };

    FtpConnection.prototype.status = function(callback) {
      var op;
      op = function(client, cb) {
        return client.status(cb);
      };
      return this.exec(op, callback);
    };

    return FtpConnection;

  })();

  ftpConfig = {
    host: '192.168.1.153',
    port: 2121,
    user: 'ftp.imgcache.153',
    password: '3Ger_q#t~_684013',
    workingDirectory: '/pet',
    poolSize: 10
  };

  ftpCon = new FtpConnection(ftpConfig);

  exports.exec = ftpCon.exec.bind(ftpCon);

  exports.upload = ftpCon.upload.bind(ftpCon);

  exports.download = ftpCon.download.bind(ftpCon);

  exports.status = ftpCon.status.bind(ftpCon);

  exports.status(function(err, state) {
    return console.log(arguments);
  });

}).call(this);
